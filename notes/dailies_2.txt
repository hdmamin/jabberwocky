Context: been fiddling around with this project again lately but I'm not quite ready to restart daily contributions. Documenting where I'm at here for now so it's easier to pick up when I come back.

11/15/21 mon
------------
Left off
-talk() now prints responses with pretty formatted persona name.

Next Steps
-adjust query_kwargs so that we don't pass the wrong ones to gptj or gpt-neo mock funcs (maybe something like drop keys in query_kwargs that aren't in the func signature? Might not work if they take kwargs).
-write new mock funcs to support:
    -codex
    -new open source gpt-like model on modelhub (name is something about "sci" IIRC)
-live typing effect?
-consider a "choose from 1 of k responses" mode. Would need to think about how this would work w/ live typing and how it would work w/ conv manager (usually query() updates the conv history).
-maybe replace save/quit options w/ prompt_toolkit menus?

Context: picking up on this again for part 2 (Alexa skill).

1/31/22 mon
-----------
X -write premortem

2/2/22 tues
-----------
X -look through sample alexa conversation skeleton repo
    X -decide whether to use that template or "start from scratch"
        UPDATE: start by trying template.
X -create alexa skill in AWS UI
X -change invocation name
    UPDATE: needed to be 2 words and I wanted it to be short. Jabberwocky -> Voice Chat.
~ -start adding intents
    ~ -start adding slots
        UPDATE: wrote list of possible slots. added Person slot and Model slot.
    UPDATE: wrote list of possible intents in misc.txt. Added choosePersona intent.
-figure out how code will be structured locally (will alexa reference a separate repo if I use the conversation template? Will a single file basically be sufficient? Maybe an `alexa` subdir which can contain whatever I need it to?)
-follow UI instructions to determine next steps

2/3/22 wed
----------
~ -read up on dialog delegations strategy (do I want this?)
    _ -add to choosePersona if necessary
        UPDATE: alexa auto-determines next thing to ask? Most of my interactions should require minimal scaffolding so I don't think we need this.
~ -read up on intent confirmation (do I want this?)
    _ -add to choosePersona if necessary
        UPDATE: unnecessary at least for now. Consider adding later for Model or settings or choosePersona, maybe.
X -create more slots (see misc.txt)
X -create more intents (see misc.txt)
~ -see backlog
    X -fix incorrect usage of intents/slots 
        UPDATE: intents should use a var name and then you set the var type in the section below. Previously I was using the var type in the intent itself. I.e. "call {amazon.Person}" -> "call {Person}", where Person has type amazon.Person
    ~ -start testing interactions
        UPDATE: lots of failures. I realized my code has been filled in with their conv template but I need to make a lot of changes.

2/4/22 thurs
-------------
~ -look through code tab to see how expected interactions look
    X -try out in Test tab
        UPDATE: still having trouble getting this to work. Found docs for ask_sdk and decided to try to follow those locally.
~ -explore possibility of local ngrok
    UPDATE: not sure if this is compatible with lamda style app code. Table this for now and return to amazon hosted endpoint.
X -add code locally
    UPDATE: created new alexa dir.
-start following ask_sdk tutorial
    X -write launch handler
    ~ -write choose model handler
    ~ -write choose person handler
-update code to use my new intents
    -regular conversation
    -choose person
    -change max length
    -change temperature

2/4/22 fri
----------
-continue following ask_sdk tutorial
    -finish choose person handler
        -figure out best way to make conv manager available globally
    -finish choose model handler
-confirm stackoverflow-suggested method of extracting slots works (unclear - pycharm code completion stopped finding it)


Backlog
-follow UI instructions to determine next steps
-figure out how code will be structured locally (will alexa reference a separate repo if I use the conversation template? Will a single file basically be sufficient? Maybe an `alexa` subdir which can contain whatever I need it to?)
