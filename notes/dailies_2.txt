Context: been fiddling around with this project again lately but I'm not quite ready to restart daily contributions. Documenting where I'm at here for now so it's easier to pick up when I come back.

11/15/21 mon
------------
Left off
-talk() now prints responses with pretty formatted persona name.

Next Steps
-adjust query_kwargs so that we don't pass the wrong ones to gptj or gpt-neo mock funcs (maybe something like drop keys in query_kwargs that aren't in the func signature? Might not work if they take kwargs).
-write new mock funcs to support:
    -codex
    -new open source gpt-like model on modelhub (name is something about "sci" IIRC)
-live typing effect?
-consider a "choose from 1 of k responses" mode. Would need to think about how this would work w/ live typing and how it would work w/ conv manager (usually query() updates the conv history).
-maybe replace save/quit options w/ prompt_toolkit menus?

Context: picking up on this again for part 2 (Alexa skill).

1/31/22 mon
-----------
X -write premortem

2/2/22 tues
-----------
X -look through sample alexa conversation skeleton repo
    X -decide whether to use that template or "start from scratch"
        UPDATE: start by trying template.
X -create alexa skill in AWS UI
X -change invocation name
    UPDATE: needed to be 2 words and I wanted it to be short. Jabberwocky -> Voice Chat.
~ -start adding intents
    ~ -start adding slots
        UPDATE: wrote list of possible slots. added Person slot and Model slot.
    UPDATE: wrote list of possible intents in misc.txt. Added choosePersona intent.
-figure out how code will be structured locally (will alexa reference a separate repo if I use the conversation template? Will a single file basically be sufficient? Maybe an `alexa` subdir which can contain whatever I need it to?)
-follow UI instructions to determine next steps

2/3/22 wed
----------
~ -read up on dialog delegations strategy (do I want this?)
    _ -add to choosePersona if necessary
        UPDATE: alexa auto-determines next thing to ask? Most of my interactions should require minimal scaffolding so I don't think we need this.
~ -read up on intent confirmation (do I want this?)
    _ -add to choosePersona if necessary
        UPDATE: unnecessary at least for now. Consider adding later for Model or settings or choosePersona, maybe.
X -create more slots (see misc.txt)
X -create more intents (see misc.txt)
~ -see backlog
    X -fix incorrect usage of intents/slots 
        UPDATE: intents should use a var name and then you set the var type in the section below. Previously I was using the var type in the intent itself. I.e. "call {amazon.Person}" -> "call {Person}", where Person has type amazon.Person
    ~ -start testing interactions
        UPDATE: lots of failures. I realized my code has been filled in with their conv template but I need to make a lot of changes.

2/4/22 thurs
-------------
~ -look through code tab to see how expected interactions look
    X -try out in Test tab
        UPDATE: still having trouble getting this to work. Found docs for ask_sdk and decided to try to follow those locally.
~ -explore possibility of local ngrok
    UPDATE: not sure if this is compatible with lamda style app code. Table this for now and return to amazon hosted endpoint.
X -add code locally
    UPDATE: created new alexa dir.
-start following ask_sdk tutorial
    X -write launch handler
    ~ -write choose model handler
    ~ -write choose person handler
-update code to use my new intents
    -regular conversation
    -choose person
    -change max length
    -change temperature

2/4/22 fri
----------
-continue following ask_sdk tutorial
    X -finish choose person handler
        X -figure out best way to make conv manager available globally
            UPDATE: initially wrote wrapper class that delegates to an attr where is stores the manager, then realized it didn't seem to be doing anything useful. Just load the manager as a global var in the global scope. Can adjust strategy later if needed.
        UPDATE: tentatively done, though will likely need some troubleshooting/extra functionality/logging/error handling once I start testing.
    ~ -finish choose model handler
        UPDATE: tentatively mostly done, though need to figure out how to handle changing model to gptj or other non-int version. I think a better strategy than updating kwargs may be to store some session-level kwargs (I believe handler_input has some kind of session object that may be appropriate for this), then always pass that in to the query method.
X -write convenience func to access slots
X -write convenience func to speak/respond
~ -clean up template file a bit (delete unused classes)
_ -confirm stackoverflow-suggested method of extracting slots works (unclear - pycharm code completion stopped finding it)
    UPDATE: prob need to wait until I figure out how to run this thing. Template has a helper method that does something similar so that's an option too.

2/5/22 sat
----------
[DON'T LET THIS GET PUSHED BACK TOO FAR - don't want to end up having to rewrite a ton of code if something is incompatible.]
~ -figure out how to get this running on lambda (if possible: reliance on local files might be a problem)
    X -how hard would it be to convert this to something we can run with ngrok? Is lambda_function.py still compatible or is it totally different locally?
        UPDATE: decided to try rewriting with flask-ask. We're still early and it seems like dev/testing will be far easier (hopefully avoid slow build time for every change).
X -write new template app with flask-ask
X -try running flask app w/ ngrok
    UPDATE: accessible via generic url.
X -rebuild model 
    ~ -see if I can access flask-ask app through aws console
        UPDATE: no errors but still references console code rather than flask ask local code.
-look into handler_input session object
    -try using this to update kwargs (e.g. model, max len, etc.)
-more intent functions/endpoints:
    X -set temperature
    ~ -set max length
        UPDATE: added skeleton func.

2/6/22 sun
----------
~ -troubleshoot model build (no errors but still references console code rather than flask ask local code)
    ~ -try new flask-ask version in Alexa console (Test tab)
        UPDATE: spent most of time troubleshooting w/ minimal progress. Seems like the test console knows about the right URL (I think) but the api call is failing so it falls back to some generic message. Sample flask-ask code from aws tutorial has the same problem - possible that flask-ask is just no longer compatible ðŸ˜¬. When using test console, I see failed requests show up in app (not to any specific endpoint, looks like?).
-more endpoints:
    ~ -set max_length endpoint
        UPDATE: still need error handling though.
    -conversation end (add extra question offering to email transcript to user?)
    -generic conv response endpoint
X -fix logger (wasn't printing to stdout)
    UPDATE: unsure if fix was related to changing logging level or just restarting app, but it works now.
X -read up on flask-ask session vs. context (readthedocs.io tab)
    X -update it to store default _kwargs attr from conv manager
    X -update chooseModel to use this
    X -update chooseMaxLength to use this
    X -update chooseTemperature to use this

2/7/22 mon
----------
X -add error handling to max_length endpoint
-add more endpoints:
    ~ -conversation end (add extra question offering to email transcript to user?)
        UPDATE: started writing but it's a bit tricky with optional saving.
    X -generic conv response endpoint
    X -debugging intent (repeat user response back)
X -first draft of func to save conv (want it emailed rather than local)
-brainstorm: what else could possibly cause these alexa issues? How to troubleshoot and eventually fix?
-see if there are places I should add reprompt (chained method after question)

2/8/22 tues
-----------
_ -new endpoint for user to set email
    _ -add intent in console
    UPDATE: think I found a way to do this via amazon API rather than through voice.
    X -function to get user email using Amazon API
        UPDATE: untested though because it requires Alexa context object to run, which means I need to get the test tab working to see if it works.
-update other endpoints to check if should_exit
-rename `exit` function to avoid clobbering builtin
-brainstorm: what else could possibly cause these alexa issues? How to troubleshoot and eventually fix?
-see if there are places I should add reprompt (chained method after question)

2/9/22 wed
----------
X -rename `exit` function to avoid clobbering builtin
~ -see if we can easily update htools.quickmail to include text attachment
    UPDATE: can't fully test yet bc of freedom app, but seems to send without error at least. Though worryingly, text never arrives to phone when I tried that using {phonenumber}@vtext.com.
X -make new jabberwocky email for sending transcripts
    X -add info to htools creds file
    X -enable unsafe app access
    X -update email_user func to send transcript as attachment
-see if there are places I should add reprompt (chained method after question)

2/10/22 thurs
-------------
X -check hmamin2 email to see if quickmail works as expected (did emails arrive? did image attachment work? Did text attachment work? What is attached text file named?)
    UPDATE: email worked, sms didn't. Text just got appended to body though, not a real attachment.
    -update to allow multiple attachments
    X -investigate lack of sms showing up in text mode
        UPDATE: do not use leading 1 in phone number email.
    X -look for solution to lack of image attachments in text
        UPDATE: you need to use a different phone number email domain than vtex.com for mms, but it looks like it may not be supported anymore.
    X -update docs to reflect new signature
    -[BLOCKED: check emailed results first to see if attachment worked. Consider adding option to attach vs. embed.] bump version and upload to pypi
~ -look in alexa dev forum for how to direct 1 intent to another (prob need to use session to set temporary key)
    UPDATE: sdk does support "intent chaining". Unclear if flask-ask does, either natively or via compatibility w/ sdk.
    -update other endpoints to check if should_exit

2/11/22 fri
-----------
X -check hmamin2 email to see if quickmail works as expected (did emails arrive? did image attachment work? Did text attachment work? What is attached text file named?)
    _ -fix as needed
    X -[BLOCKED: check emailed results first to see if attachment worked. Consider adding option to attach vs. embed.] bump version and upload to pypi
    UPDATE: emails arrived, image attachment worked, no diff between image attach vs. inline, text attachment worked, text file is named same as source file as intended.
X -update curl to have verbose/non-verbose option
~ -read more of intent chaining tutorial
    UPDATE: not worth getting too far into this yet - wanted to make sure flask-ask provided some way to do this first.
    X -look for how to implement this w/ flask-ask
        UPDATE: can import delegate just like question or statement, but still figuring out how to use it.
    -update other endpoints to check if should_exit
X -update intent decorator to always store prev intent in session
~ -figure out how to test flask-ask locally
    UPDATE: still no progress. Think I need to figure this out before going any further - hard enough to build a hello world app without any mechanism for testing, but impossible for a complex skill w/ intent chaining.
X -brainstorm: what else could possibly cause these http/alexa issues? How to troubleshoot and eventually fix?
    UPDATE: some thoughts below
    -wrong AWS account?
    -start totally new skill in console and try again
    -pare app down to most bare-bones version and see if I can get it working in console (comment out new endpoints that might not have intents defined for them. Also might get rid of some boilerplate, like the "what's your fav color?" intro which I don't know the source of)
    -flask-ask is deprecated (sort of doubtful, since found a tutorial from not that long ago still using it)
    -alexa dev console is broken (sounds like it was at some point, but that was years ago - surely it's not still broken. Could create new skill w/ old console maybe? Forget if that's an option.)

2/12/22 sat
-----------
X -fill in some docstrings in app.py
~ -work through troubleshooting ideas 1 by 1
    ~ -wrong AWS account?
        UPDATE: think this is correct (name Harrison and initial H; couldn't figure out how to easily confirm email but I'm pretty sure it's the right one)
    ~ -pare app down to most bare-bones version and see if I can get it working in console (comment out new endpoints that might not have intents defined for them. Also might get rid of some boilerplate, like the "what's your fav color?" intro which I don't know the source of)
        UPDATE: got launch intent working on dummy app! Still haven't gotten other intents working though.
    _ -flask-ask is deprecated (sort of doubtful, since found a tutorial from not that long ago still using it)
        UPDATE: seems doubtful since bare bones app shows signs of working. Possible question/statement json is no longer compatible, I suppose.
    X -start totally new skill in console and try again
        UPDATE: combined this with bare bones app strategy.
    _ -alexa dev console is broken (sounds like it was at some point, but that was years ago - surely it's not still broken. Could create new skill w/ old console maybe? Forget if that's an option.)
        UPDATE: seems unlikely given positive signs with bare bones app.

2/13/22 sun
-----------
~ -continue trying to get dummy app to work
    X -add HelloWorld endpoint
        UPDATE: This works! 
    ~ -debug YesIntent endpoint (first expected response after launch. Error seems to be with recognizing the right intent, not with the response, based on terminal logs.)
        UPDATE: Still no success. Sincce HelloWorld works, my guess is YesIntent sample words are too short/generic ("yes", "sure"). Maybe AnswerIntent fails for the same reason.
~ -look at jabberwocky launch endpoint and see if I can find any differences that would cause it to fail when dummy app launch endpoint works (see misc.txt for promising idea)
    [IF theory of name clobbering is correct]
    X -rename Voice Chat to something less likely to have duplicates
        UPDATE: trying "Quick Chat". Tested this in dev console and it doesn't seem to be a built-in, unlike Voice Chat.
    X -rebuild model
    X -test launch intent for jabberwocky
        UPDATE: still failing. Think we may need to change template. See misc.txt.
    X -Try non-intent response to see if fallback handler works on jabberwocky (maybe don't even try to actively start app? Could try both ways.)
        UPDATE: no, just no response or built in default of some kind.
    X -If that doesn't work, switch to make skill debugger console the main one and deprecate/delete jabberwocky in console. Choice of vanilla skill rather than conv template might fix things.
        UPDATE: Created new skill since I can't figure out how to rename skill (can change name in invocation but not how it shows up in console, it seems)
-test new skill intents
    X -launch
        UPDATE: Yes! First working endpoint for jabberwocky. Needed to use name "Quick Chat" as alexa interprets "Voice Chat" as some kind of existing functionality which I haven't enabled, apparently.
    ~ -fallback intent
        UPDATE: not working yet. It did in dummy app so need to figure out what the difference is here.
X -map out conv flow model
    UPDATE: Drew out basic flowchart of interactions. See notebook.

2/14/22 mon
-----------
~ -troubleshoot fallbackIntent in new skill (worked in dummy app, so why not here?)
    UPDATE: my intent deco was implemented wrong. After fixing it, the fallback endpoint does work as far as reading the right response. However, while logging inside the fallback endpoint wokrs, logging inside deco does not. Unsure if this means the deco is somehow going unused (seems unlikely given recent behavior) or if this is a matter of logging output being hidden. Tried using diff logger than the default app one but this didn't resolve the issue. Tried checking prev_intent and it's not being updated either (supposed to be done in deco). However, if I manually update it in the func itself, it works.
X -add endpoint to list out all personas

2/15/22 tues
------------
X -add sys.exit in various stages of intent deco to try to get to the bottom of whether it's being called
    UPDATE: it wasn't. ask.intent deco is quite unusual and overriding it is confusing. Took a different approach.
X -write new ask subclass and redefine intent deco
    X -write custom IntentCallback
    UPDATE: ask.intent wrapper is odd, appears to never actually be called but it must be sometime. Must do some weird registration magic or something on the ask object. Managed to get my prev_intent tracking working by writing custom callback and having custom ask class wrap the input function when it's passed in (rather than explicitly defining on start/end behavior in decorator, define it via callback methods).

2/16/22 wed
-----------
X -add intents to console for new skill (jabberwocky-voice-chat, not jabberwocky)
X -add slots to console for new skill
X -test app in test console and see what doesn't work (sure there will be something)
    UPDATE: looks like it can send a request to choosePerson and changeTemperature endpoints but they receive no arguments (e.g. slots aren't working, or at least not how I expected them to).
    X -write next steps based on observed errors
        UPDATE: see tomorrow's to do list.
X -docs for custom ask (in particular: note to self not to delete seemingly useless wrapper inside intent deco. Flask-ask version uses that so I don't know what else is reliant on it)
-start updating endpoints in py file based on observed errors (see above)

2/17/22 thurs
-------------
-fix missing slots issue with choosePerson
    _ -replace actual logic w/ debugging/logging to figure out what (if any) arg(s) func is receiving
        UPDATE: looked at existing logs and error indicatded no arg of any kind was received.
    X -update parsing to get correct object
        UPDATE: found blog post implying custom slot might have to be extracted from request manually. Wrote new code to do that and it works for choosePerson (successfully selected an existing persona!).
    X -reintroduce actual logic and test
        UPDATE: new persona doesn't work yet (relies on YesIntent, which I added now, but much more new logic is needed).
~ -start updating endpoints in py file based on observed errors (see above)
    ~ -changeModel
        X -rename chooseModel -> changeModel (forgot I chose diff name in console for this skill)
        X -fix ModelType slot (4 -> 0)
        UPDATE: added some str handling to chooseModel endpoint. Model is currently rebuilding in console.
    -changeTemp
        UPDATE: brief testing reminded me of issue where alexa thinks I'm trying to change temperature of an actual device. Will need to consider options for how to handle this.
    -changeMaxLen

2/18/22 fri
-----------
~ -continue updating endpoints in py file based on observed errors (see above)
    -changeModel
        X -check that build succeeded
        X -try out zero, one, two, three
        _ -try out j
        _ -try out neo
        UPDATE: might want to rewrite j/neo query funcs w/ availability of new open source models (and possible deprecation of old gpt-j api? Unclear.) Do this later.
    -changeTemp
        ~ -consider how to deal with issue noted in prev day's notes (could rename to Temp/something else, or maybe there's a way to override default commands when in a custom skill)
            UPDATE: tentatively seems okay now - I think maybe before I was saying this after returning a Statement rather than a Question so we had exited the skill?
        ~ -figure out how to convert str to num
            UPDATE: considered requiring an int in [0, 99] and hardcoding list of strings. Was curious though and decided to try gpt way - got this working reasonably well but only with a disappointingly big model (smaller ones prob could do well with more prompt tuning but I didn't quite get there yet). Added prompt text and config files and added API call to app script. However, still having some trouble parsing decimals.
    -changeMaxLen
    -reply

2/19/22 sat
-----------
-continue fleshing out endpoint logic
    ~ -changeTemp
        X -consider options for improving number parsing and choose one (i.e. require int from 0-99 and divide answer by 100, or update slots to expect "point {number}".)
            X -make necessary changes in console and/or script
            _ -update gpt word2number prompt files accordingly (e.g. maybe no decimals needed after all, could just be word2int)
                UPDATE: unused now so not important. For general purpose future use, better to leave it more broadly capable.
        UPDATE: changed to use hard-coded dict with some fuzzy matching. Couldn't test yet since I accidentally blocked dev console w/ Freedom.
    -changeMaxLen
    -reply
~ -planning re maintaining settings
    UPDATE: initially started as just trying to alias session.attributes with something shorter since it's used so much. Surprisingly trick. Ended up causing me to think about settings and realizing we really want 3 diff levels (see misc.txt notes from today). Started building new class to maintain this.

2/20/22 sun
-----------
X -continue fleshing out endpoint logic
    X -changeTemp
        X -test new changes in console.
            UPDATE: updating temperature works for valid integers. Non-number word rightfully raised an error which was handled gracefully.
    X -changeMaxLen
        X -look more if there's a better way to do this with alexa (surely yes, but seems like no???)
        _ -add gpt3 parsing (too many ints to hardcode cleanly)
            UPDATE: Turns out it does this automatically after all. Previous failures might have been due to flask ask argument issue. Tested this on both valid and invalid values.
X -update settings intents to accept optional slot for scope (global/person/conversation)
    UPDATE: still need to fully make use of this in app.py.
X -Settings class
    X -think more about desired interface (important - need to know what I'm trying to implement)
    X -continue fleshing out attr access methods
    X -write resolve() method
    X -update app.py accordingly
X -start building query_gpt_j variant using banana.dev backend (prob smallish version, but good to have another free option in case random git one gets deprecated)
    UPDATE: need to add support for 'stop' param, maybe better arg validation to ensure no nnaming issues around topK vs top_k, etc.

2/21/22 mon
-----------
X -consider: should Settings include kwargs only or also things like prev_intent/should_end/should_save?
    X -update app.py and/or utils.py accordingly
    X -document Settings
    UPDATE: include both in Settings. Make kwargs accessible via bracket notation and general settings accessible via dot notation. Also try to cut down on number of general (non model query) settings - rely more on prev_intent and yes/no. Might have to change yes/no intent endpoints to not update prev_intent though.
X -test new changes in test console
-flesh out `reply` endpoint

2/22/22 tues
------------
-debug/fix: choose person intent seems to soak up any reply containing a name (or at least sometimes). Can try:
    X -adjusting sample utterances for choosePerson intent in console and re-test
        UPDATE: found "Call {person}" no longer is clobbered by default behavior. Guessing I previously exited the skill session w/out realizing it before trying to trigger that intent.
    ~ -add some logic using prev_intent to infer when a reply has mistakenly been identified as choosePerson
        UPDATE: added check in choose_person if conv is active but this still chops off the first word of the response  we can't recover the full text.
    X -Add new `reply` endpoint w/ AMAZON.SearchQuery slot (this is supposed to soak up the whole text response)
        UPDATE: had to use leading space to avoid errors.
-try refactoring out base functionality of endpoint funcs (bc flask_ask not passing args to intent funcs, we need to get slots inside func, which makes it hard for one intent to call another)
    UPDATE: Ended up being unnecessary so far but might have to reintroduce at some point. Another option is to make endpoint accept an optional arg and then use it if provided and extract slot if not.

2/23/22 wed
-----------
X -try updating reply intent to match what I made in console
    X -test in console
    _ -update/rm fallback intent in code
        _ -and rm in console if necessary
        UPDATE: decided keep for now. Might need an extra layer of fallback beyond SearchQuery.
    UPDATE: works, though identified possible bug on second query (I also called changeModel in between). Conv didn't think a conv was in progress - does conv object get recreated after each skill call? Need to investigate. Also found possible bug where sessionstate str appeared empty in console even though mock_func should have been set.
X -update ask deco to log settings state on each intent call
-consider yes/no intent logic: need to prevent them from updating prevIntent? Consider tracking a longer intent history list rather than just prev.
    -make updates accordingly
-see if we can move IntentCallback and CustomAsk to utils (bit tricky w/ reliance on session?)
X -make use of Scope var in settings intents
    UPDATE: also added `default` option to slots func to make this work better when user doesn't specify level.

2/24/22 thurs
-------------
X -investigate issue where second reply causes error due to "conv not in progress". (see yesterday's notes documenting this error and the one below)
    UPDATE: rewrote slots func a bit (I think I was doing several things wrong - list(values())[0] logic was not safe, changeTemp func passed wrong slot name to slots for Temperature). Seems to work now.
~ -investigate bug where Settings obj __str__ appears empty in logged message
    UPDATE: could not reproduce. Keep an eye out for this.
X -add readContacts intent in console
    X -test in test console
-update end of conv to erase conv-level settings
    -update change of person to change person-level settings
    -maybe update settings.clear() to allow clearing a single (or finite number) of state levels.

2/25/22 fri
-----------
X -add readSettings intent to console
    X -add code endpoint
    X -launch rebuild
    X -test in console
X -add endChat endpoint
    UPDATE: also had idea to prefix settings commands with "Alexa" to distinguish them from replies. But when testing, alexa did not recognize these utterances (just fell back to reply intent). Need to work on this more.
-update end of conv to erase conv-level settings
    ~ -consider whether settings resolution order is right/desirable (i.e. should global level take priority or should conv level?)
        UPDATE: thought a bit and this is quite a complex task. Still not at a solution yet but my sense is that priority should be more about sequence (most recent = highest priority) and scope should just be thought of as "when do we undo this setting change action"? Need to hold off on other changes until I figure out desired system.
    -update change of person to change person-level settings
    -maybe update settings.clear() to allow clearing a single (or finite number) of state levels.
~ -start prototyping prompt routing system (a way to implement intent chaining, basically)
    UPDATE: some progress here. Plan is to have an endpoint func's follow up func by named identically except with a leading underscore. Could become problematic if we need multiple followups though. Started testing on end_chat but ran into utterance problems (see above).
-tweak slots() interface so we can get more informative error messages (right now all errors are read back to user as empty strings)
    
2/26/22 sat
-----------
[LEAVE EMAIL UNBLOCKED - testing email sending]
-try adjusting end_chat utterances since curr ones aren't getting recognized
    X -maybe adjust other settings intent sample utterances to be prefixed by something distinctive. Looks like 'alexa' might not have been the best choice.
        UPDATE: noticed my attempt to trigger end_chat was getting sent to SearchQuery WITHOUT the leading "Alexa", adding to my theory that this word is treated differently. Decided on the name "Lou" for the skill "assistant" (one syllable, inspired by Lewis Carroll, gender neutral) and prefixed sample utterances for all settings-related commands with it.
-continue testing end_chat intent + prompt chaining
    -troubleshoot transcript sending as needed
-look into EndSession more
    -When is it called? I.e. is it triggered by "stop" or something else?
    -What should it return? I think this is correct based on an official tutorial but should confirm.


Backlog
-------
-update end of conv to erase conv-level settings
    ~ -consider whether settings resolution order is right/desirable (i.e. should global level take priority or should conv level?)
        UPDATE: thought a bit and this is quite a complex task. Still not at a solution yet but my sense is that priority should be more about sequence (most recent = highest priority) and scope should just be thought of as "when do we undo this setting change action"? Need to hold off on other changes until I figure out desired system.
    -update change of person to change person-level settings
    -maybe update settings.clear() to allow clearing a single (or finite number) of state levels.
-tweak slots() interface so we can get more informative error messages (right now all errors are read back to user as empty strings)
-allow fuzzy match for choosePerson (e.g. einstein -> albert einstein)?
-consider yes/no intent logic: need to prevent them from updating prevIntent? Consider tracking a longer intent history list rather than just prev.
-see if we can move IntentCallback and CustomAsk to utils (bit tricky w/ reliance on session?)
-add support for banana.dev version of gptj 
-update query_gpt3 to support goose.ai models (e.g. neo 20b)
    -update to support codex, embeddings, etc. (not necessary here, probably, but good to do in general)
-clean up some dummy endpoints in app.py
-rm some old files in alexa dir from abandoned appraoches
-docs for intentcallback
-think more about how chaining/delegation will work
-see if there are places I should add reprompt (chained method after question)
-update other endpoints to check if should_exit

