Start date: 4/9/21
Soft end date: 7/1/21 (12 weeks; gpt3 trial ends 5pm the night before)
	UPDATE: 9/12/21 (22.5 weeks; wrote most of this around the 14 week mark when I thought I was basically done but somehow I kept finding more things I wanted to add)

Final Product
-------------
Required:
X - >=1 mobile app OR desktop app (streamlit/dash/flask etc. does NOT satisfy this)
	UPDATE: dearpygui desktop app
_ - >=1 illustrated poem/phrase where both the text and image are generated with at least some ML help
	UPDATE: no longer applies due to the shift in project goals (which I believe I planned for as a possibility). I did end up with demonstrable takeaways though in the form of gifs/videos of the chat/audio interface.

Optional:
_ - 1 web app
	UPDATE: I've done a lot of streamlit work recently and this would be mostly duplicating the gui which sounds boring and unnecessary.
_ - mobile AND desktop app (1 or the other is required; both would be cool though since dearpygui looks intriguing)
	UPDATE: stick w/ 1. Again, duplication.

_ - train >= 1 model (probably not really necessary for what I initially have in mind, but I feel I should keep my torch skills sharp so it might be a good idea to try to shoehorn something in)
	UPDATE: not needed, especially for what the project ended up being. Also should get to do this at work this quarter.
    _ - pytorch lightning usage (easier to just keep using incendio, but realistically I probably should transition at some point)
		UPDATE: see parent bullet
    _ - try 1 new variant in gan training (coursera courses introduced a bunch of interesting things people have tried - progressive resizing, various forms of noise injection, mapping networks, etc. Should have enough intuition at this point that I could try out a variant in some of the pre-existing gan code out there. And if it doesn't work, the existing code is good enough that I should still be able to get fun results.)
		UPDATE: change of project goals made this irrelevant. Maybe something for a future project.

Concepts
--------
_ -GANs - after those 2 coursera courses, it's time for some more applied work
	UPDATE: change of project goals made this irrelevant.
X -prompt engineering - I'm still not convinced this will be useful for long, but get some practice writing natural language prompts for GPT3.
	UPDATE: got a bit of practice with this. It's alright but I'm mostly interested in getting a prompt that's good enough to do something reasonably well - no desire to extensively tune prompts to perfect responses. Still a bit skeptical about projections re the rise of prompt engineering but even if they're right, I don't think I'd want to do this.
X -mobile and/or desktop gui development (been wanting to try this for a while, and I finally found a couple options that look satisfiably pretty)
	UPDATE: got some experience but not sure what to make of it. The whole system of using programming to define callbacks that affect what the user sees and interacts with is fun, much like streamlit/dash. I did find it a bit annoying to work with in some ways but that might be library-specific: looks like dearpygui is doing a lot of python "black magic" which I like in spirit but can get a bit frustrating to use. I did find the complexity spiraled out of control quickly: my DS ad-hoc dev habits are fine for most DS projects but even a simple GUI like this turned into a tangled web of callbacks using a mix of hardcoded params and user-provided ones, and returning to this project in a few months would probably be incredibly hard. It also strikes me that "share-ability" feels like a big component of these types of projects and desktop GUIs just aren't as convenient for this as web UIs. Don't think dearpygui provides mobile yet, otherwise that would largely address that issue. Separate issue: dash and streamlit seem to lend themselves to customization a bit more easily - you can render html or even create custom react components for dash. Here, we're a bit more limited. Maybe they do allow more custom components but if so, I haven't found how.

Tech
----
X -kivy and/or dearpygui
	UPDATE: dearpygui.
_ -nice to have but almost certainly unnecessary: multi GPU training. Just feel this would be good to learn at some point but this most likely isn't the project.
	UPDATE: no model training with updated project direction.

What could go wrong?
--------------------
1. Burnout (sensing a theme with these premortems.) Especially if model training gets involved.
[SOLUTION]
-put coursera gans courses on hold unless there's some content you specifically think could help with the current project.
official expectation is 30 minutes, not 60.
-rule: if you catch yourself trying to watching the clock trying to stretch out a task to go from 27 minutes to 30, just wrap up. Coming in a couple minutes short is fine.
-keep edu reading requirements low. Just while brushing teeth is fine unless you want to read more.
-maybe try to get back into habit of keeping sessions relatively early (mornings on weekends, right after dinner on weekdays? Tradeoffs here but putting it off must be kind of mentally taxing).
-I didn't really use this last time, but keep flex day as an option. I just hate to have a zero progress day. Maybe try to maintain a few small cognitively lazy tasks at all times (e.g. writing a docstring) so I can choose a light day if necessary.

[UPDATE]
A little bit but not too bad. There was no model training which might have helped. I did pause my GAN courses which was a good move. I did clock watch a little bit at times but I also wrapped up a couple minutes short of an hour at times, especially if I was quite productive during that time, which I've been reluctant to do in the past. Still finding it hard to interalize the new 30 minute target though. Moved edu reading to the morning so I have fewer after-work tasks which was a good move. Towards the end of the project, had some success moving work times earlier on weekends through strategic use of freedom app (I should write a post on this, if for nothing else than to ensure I don't forget it. I'm getting better at using these tools.). I might have used flex days occasionally, I forget. Usually I ended up working a bit on this too though.

Overall, not the biggest problem. I think one key is to look at my tasks for the day before I plan on starting (e.g. when I start my 1focus session). Usually they sound more manageable than I expected and it makes starting a lot less intimidating. For the same reason, try to put easiest task as first bullet point to minimize this "starting friction".

Also, I think the fact that this is something I might actually use probably helped - I kept wanting to add 1 more feature, and then thinking of something else I wanted. Excitement is a good shield against burnout.

2. run out of gpt3 quota/time
[SOLUTION]
-This is a perfectly acceptable use of learning funds. Don't hesitate to buy more queries.

[UPDATE]
I did go past the end of my trial (only used ~half my credits but sadly they expired with the trial). But they introduced a pay as you go tier so it's really quite cheap, and I still think it's fair game for reimbursement later.

Also eventually got codex access which provided some extra credits.

3. Frustration at custom GAN experiments not working
[SOLUTION]
-Set expectations low. Most experiments will go nowhere and that's normal.
-Start with pre-existing GAN code and make sure the default version works. Starting from scratch like with img_wang has so many opportunities for bugs to seep in.
    -Also, even if my variants don't work, we should have something cool. With img_wang, when stuff didn't work I just ended up endlessly debugging trivially simple tasks, which wasn't very inspiring.
-Remember the focus of this project - delivering something fun and maybe useful. The experimental aspect is very much secondary.

[UPDATE]
GANs didn't end up being involed. Nor did experimental code. These are good things to keep in mind though.

4. Generated art/audio etc. is disappointly low quality
[SOLUTION]
-If it happens, it happens. Gpt3 alone is pretty cool so surely we'll get some interesting stuff out of this.

[UPDATE]
Not relevant for the eventual project direction. I guess some conversations might not be as high quality as I'd like, but that feels a bit different than the results of a model I trained myself.

5. Sidetracked working on gan experiments and don't get to do much gpt3 stuff before trial expires.
[SOLUTION]
-For one, I doubt this will happen, and if it does I can always buy more queries.

[UPDATE]
No GANs, but I did end up mostly working on GUI things or youtube transcript interfaces rather than "talking to" gpt3. I guess there's plenty of time for that - it doesn't need to be part of the project. In fact, the project was partly about making that more convenient in the form of an audio interface. My once concern here is the transcription is just good enough to be kind of usable but just bad enough to be an annoyance (I have to clean up most responses a bit). Also, trial expiration wasn't a big deal because of new pay-as-you-go tier.

6. Project is challenging enough that it drags on a long time and I get bored/worn down by it
[SOLUTION]
-There are a few things I'd like to try and doing all of them thoroughly could take ages. Don't be afraid to postpone 1 or more of these til later. The models will only keep getting better the longer you wait.
-Introduce a mid-way checkin (not sure of name yet, but it makes sense: we have a premortem at the start, a postmortem at the end, now we add something in the middle.) Let's schedule something now for 8 weeks out so I don't forget. This is a time to take stock - am I enjoying the project, am I learning the things I thought I would, are things going wrong that I did or didn't foresee? Should I wrap up early?

[UPDATE]
It did go on very long (technically I cheated and am writing this before I'm 100% done - I could wrap up now but at the very least should do some more documentation/reorganization and add gifs to the readme). But it wasn't so much the degree of technical challenge, more that I kept finding new features I wanted or new tasks I wanted to support. Skipped the mid-way checkin which I think is okay - was still a good reminder that I should have a direction locked in by that point, which I did. Ended up postponing art/gan work for another time which I think was fine.

(This actually went way longer than I could have guessed - the above was written in mid July and I'm only now wrapping up ~8 weeks later. But the sentiment remains the same.)

7. Project is too poorly defined and I can't decide which direction to pursue, resulting in several poorly done partial projects.
[SOLUTION]
-Add reminder at the 6 week mark to commit to something.

[UPDATE]
There was some risk of this initially but I did end up committing and getting something cohesive working.

Lessons from last time
----------------------
-Burnout is always a risk, so keep your educational book expectations really low. Anki flashcards might need to be discarded or reduced to a really tiny expectation.
	UPDATE: Stopped flashcards (good call). Moved edu reading to morning (also good call).
-Really try to push (in terms of project difficulty/ambition, not time commitment). The point is largely to test the boundaries of my abilities so failure is expected and welcome. If I try something hard and fail, that's better than not trying and just staying at the same level of skill forever.
	UPDATE: Maybe fell short here. GPT3 is pre-trained and I didn't train any new models on top of it. I was semi-ambitious in features to support (e.g. change photo/bio/voice gender depending on person) but not insanely so (no ML-generated voices or animated faces speaking). One way I could have pursued this was embracing dearpygui's declarative approach rather than reverting to OOP. It just seemed like it would be difficult to keep a large program organized that way, but that also turned out to be true with OOP. And maybe if I researched that exact topic, I'd find proven methods for achieving that goal. Keep this in mind in the future (i.e. be on the lookout for unexpected ways to grow: I anticipated the "pushing" here would come in the form of doing research-y things with GANs, but there was an opportunity to learn about different programming paradigms.).
-Pay close attention to what aspects you enjoy. I had trouble choosing a project after finishing webgraph, and it would be nice if that process is easier next time.
	UPDATE: I kind of already knew this but a lot of my enjoyment comes from getting my computer to interact with different mediums (e.g. audio) and automate things (e.g. simple heuristic for inferring gender based on wiki bio). Also enjoyed some of the non-GUI things I did with the youtube Transcript interfaces or the ConversationManager interface - standard OOP things.
-Make some time for a 100% break afterwards (not even project research) and make that mandatory. This time, I ended up only halfway committing to the break and it ended up being both longer and less relaxing than would be ideal.
	UPDATE: Haven't done this yet but I'll try to. May be tough to enforce. Sept update: this probably won't happen. Whoops.

What went well
--------------
-meta-improvements to productivity: e.g. delegating discipline to a later time, moving reading to morning, laying off moocs
-end product is something I might actually use
-finally satisfied GUI curiosity (although I somehow feel a bit underwhelmed? Not sure what I was expecting, maybe desktop just isn't the most relevant medium these days. Or maybe dash/streamlit work is sufficiently similar that this didn't feel that new after all)
-The fact that I chose to extend this project past the 3 month mark is probably a good sign in terms of enjoyment.
-Used threads to produce a clear, tangible improvement (granted in a pretty simple way and don't know if it was an ideal solution, but they definitely feel less intimidating now, at least for basic use cases). Sept update: got way deeper into threads than when I first wrote this, to the point that I think it may have been the biggest win from this project. Adds to the theme that this is my year of getting comfortable w/ various approaches to concurrency.
-Getting a feel for working with large language models is good. Reading about the mechanics or even coding them up is one thing but using them seems to provide a sort of intuition that is kind of complementary. Before, I understood temperature mostly via the equation, and if I hadn't done anything with it recently it might take me a minute to triangulate my way to remembering what increasing vs. decreasing did. After using the model a bunch, it's now instantaneous: low temperature for less variable outputs.
-Tried some sort of creative ideas: improving transcription quality, generating complementary color schemes (doesn't work amazingly but that is a cool way to test the limitations of the text-only interface), predicting sports outcomes (not so creative in itself, but I tried to provide sample analyses that were particularly prescient - thereby encouraging the model to seek out "good at predicting future events" in its compressed knowledge base (using that term very loosely).

What went poorly
----------------
-Project pivot from GAN things -> audio interface meant I didn't get the research exercise or deepening of GAN understanding that I'd hoped for initially. Turned into more of a straightforward "implement this engineering thing" task. Not the kind of super ambitious technical growth I'd like to aim for with these projects.
-Still reluctant to internalize 30 min goal - 60 just feels kind of necessary to make a good chunk of progress.
-Coding standards/organization were a little messy with the app. May still clean that up a bit and partly that may be due to the library (couldn't find any examples of large, well-organized apps w/ this framework).
-the interface itself isn't particularly creative. Loom (another project I found on github) is a much better example of experimenting with interesting ways to interact w/ large language models. 

Last project's "Thing to do differently next time"
--------------------------------------------------
-Make sure topic is sufficiently new - make sure I don't "repeat 1 year of experience n times".
	UPDATE: I think I succeeded here - not a home run maybe, but at least a double.
-Really try to pick something exciting - may be hard to find, and maybe I thought I was doing this last time, but aside from parts of working on the app, I don't know that this was all that engrossing.
	UPDATE: Somewhat succeeded - I think once I arrived at the audio conversation mode I was quite motivated. Still, the daily grind does tend to wear at the excitement after a while. Even my real job doesn't operate 7 days a week. Working on htools is one of the few things that seems to maintain that level of fun, though the last time I picked library dev as a project I vaguely recall even that took a hit.

Final thoughts: I'm a bit torn between picking projects that emphasize variety (build up breadth of experience in this explore phase) vs. trying to build towards a more cohesive skillset with deep expertise in a specific area. I'm thinking another year or so of exploration is fine but at some point it might be good to start honing in a little bit on something.
	UPDATE: Didn't re-read this until after I wrote the section below but it seems I have very much aware of this risk of over-weighting novelty and made a calculated decision. Fair enough. Still not sure where my thoughts lie on this but I think exploratory mode can extend for 1-2 more projects.

Thing to do differently next time
---------------------------------
-Really, really try to pick a project that fills at least 2 of these goals (this one met #3, partially met #2 but not quite a slam dunk, and did not meet #1, though it could have if the direction didn't pivot. So I guess this isn't exactly a thing to do different next time, more of a "let's convert that soft yes/maybe to a definite yes.").
	1. Super amibitious work that pushes technical (and optionally research) abilities to their limits and hopefully expands them.
	2. Is an absolute delight to work on.
	3. Produces something I use after the project is done.
-Novelty (gui programming) is good but maybe shouldn't be overly valued in and of itself. Still a bit torn with this one - I do think it's fine to stay in the exploratory-heavy phase at this point - but maybe the point is to pay attention to HOW novel something really is. GUI programming doesn't feel all that different from web app programming, probably because on a local dev level it's not.
-Be on the lookout for unexpected opportunities for creativity. Even if 1 area of a project isn't particularly creative/challenging/innovative, there's always potential to do interesting new things in other areas (e.g. Loom doesn't provide any innovation in model arch/training and even the prompt engineering isn't particularly unique, but the UI turns gpt3 into something pretty different from other applications I've seen).

Final thoughts: Once this is 100% done I should take a good long COMPLETE break and only return to side projects when I feel excited to do so. A more writing-heavy (as opposed to coding-heavy) one might be a good choice, but I'll leave that decision for later. This quarter's work projects are providing an opportunity for the kind of technical growth I initially designed these side projects for so maybe there's not a pressing need to rush into the next one.

Final final thoughts: Oddly, I think I feel more energized and less burned out now than I did when I first wrote this postmortem nearly 2 months ago. I have several extensions in mind (alexa, sms) and it's tempting to line those up as my next project but I think it might be good to set this aside for a while in favor of something totally different. I still like the idea of the type of work introduced to me by those coursera gan courses - researchy projects that involve ML but don't necessarily involve training new models (or if they do, it's just for some downstream application - we don't really care about making the model itself get strong performance metrics, we just want to run get_trained_model() so we can do something with it).
